pycard identities are XML files.

Thus, the beginning of a card:
<?xml version="1.0"?>
<card v="1.0">
 <identity>
<person> struct:
  <person>
   <name>John Doe</name> <- name
   <email>john.doe@gmail.com</email> <- email
  </person> 
<verification> struct:
  <verification>
   <signedby>Test Verification Authority</signedby> <- signer - if self-signed omitted
   <trust level="1" /> <-- trust level - 1 is highest 4 is lowest
   <hash>95672b7775e3e8189d5d32b738f55e2824643968</hash>
   <server>http://signer.com/server</server> <- server for verifing sig - if self-signed is selfsigned
  </verification> 

<hash> is computed using hashlib.sha1('nameemailid-for-signersigner-id-verifer-server').hexdigest().
Likewise, hashlib.sha1('John Doejohn.doe@gmail.com1B8R5EC51http://signer.com/server').hexdigest() = '95672b7775e3e8189d5d32b738f55e2824643968'
Hash is checked with server.

Ending the file:
 </identity>
</card> 

-servers-

Servers are GETed to. They return XML.

GET /server?method=exists&hash=95672b7775e3e8189d5d32b738f55e2824643968
 - verifies if the sig hash exists on server
 - returns 0 if hash exists or 1 if not
 - example:
<?xml version="1.0">
<pycard_call>
 <method>exists</method>
 <hash>95672b7775e3e8189d5d32b738f55e2824643968</hash>
 <return>0</return>
</pycard_call>
GET /server?method=isvoid&hash=a2190edfb238c0afe349aff51d92842de1f480de
 - checks if hash is void
 - returns 0 if it isn't or 1 if it is
 - example:
<?xml version="1.0">
<pycard_call>
 <method>isvoid</method>
 <hash>95672b7775e3e8189d5d32b738f55e2824643968</hash>
 <return>0</return>
</pycard_call>